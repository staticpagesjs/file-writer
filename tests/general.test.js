import writer from '../esm/index.js';
import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';
import { rimraf } from 'rimraf';

const generatedFileContents = 'Generated by @static-pages/file-writer test runner. This file can be deleted safely.';
const renderer = d => d.output.body;
const outDir = path.join(path.dirname(fileURLToPath(import.meta.url)), 'dist');

afterEach(() => {
	rimraf.sync(outDir);
});

test('it writes a simple data object to file #1', async () => {
	const write = writer({
		outDir: outDir,
	});

	await write({
		value: {
			header: {
				path: 'path/to/file.txt',
			},
			body: generatedFileContents,
		}
	});

	const expectedPath = path.join(outDir, 'path/to/file.html');

	expect(fs.existsSync(expectedPath)).toBe(true);
	expect(fs.readFileSync(expectedPath, 'utf-8')).toBe(generatedFileContents);
});

test('it writes a simple data object to file #2', async () => {
	const write = writer({
		outDir: outDir,
		renderer,
	});

	await write({
		value: {
			url: 'path/to/file',
			output: {
				body: generatedFileContents,
			}
		}
	});

	const expectedPath = path.join(outDir, 'path/to/file.html');

	expect(fs.existsSync(expectedPath)).toBe(true);
	expect(fs.readFileSync(expectedPath, 'utf-8')).toBe(generatedFileContents);
});

test('it writes a simple data object to file #3', async () => {
	const write = writer({
		outDir: outDir,
		renderer,
	});

	await write((async function*(){
		yield {
			url: 'path/to/file',
			output: {
				body: generatedFileContents,
			}
		};
	})());

	const expectedPath = path.join(outDir, 'path/to/file.html');

	expect(fs.existsSync(expectedPath)).toBe(true);
	expect(fs.readFileSync(expectedPath, 'utf-8')).toBe(generatedFileContents);
});

test('it writes a simple data object to file #4', async () => {
	const write = writer({
		outDir: outDir,
		renderer,
	});

	await write({
		url: 'path/to/file',
		output: {
			body: generatedFileContents,
		}
	});

	const expectedPath = path.join(outDir, 'path/to/file.html');

	expect(fs.existsSync(expectedPath)).toBe(true);
	expect(fs.readFileSync(expectedPath, 'utf-8')).toBe(generatedFileContents);
});

test('works with custom outFile()', async () => {
	const write = writer({
		outDir: outDir,
		outFile(x) {
			return x.name;
		},
		renderer,
	});

	await write({
		value: {
			name: 'path/to/file.html',
			output: {
				body: generatedFileContents,
			}
		}
	});

	const expectedPath = path.join(outDir, 'path/to/file.html');

	expect(fs.existsSync(expectedPath)).toBe(true);
	expect(fs.readFileSync(expectedPath, 'utf-8')).toBe(generatedFileContents);
});
