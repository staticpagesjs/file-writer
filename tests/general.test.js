const { default: writer } = require('../cjs/index');
const fs = require('fs');
const path = require('path');
const rimraf = require('rimraf');

const generatedFileContents = 'Generated by @static-pages/file-writer test runner. This file can be deleted safely.';
const renderer = d => d.output.body;
const outDir = path.join(__dirname, 'dist');

afterEach(() => {
	rimraf.sync(outDir);
});

test('it writes a simple data object to file #1', async () => {
	const write = writer({
		outDir: outDir,
	});

	await write({
		header: {
			path: 'path/to/file.txt',
		},
		body: generatedFileContents,
	});

	const outputExists = fs.existsSync(path.join(outDir, 'path/to/file.html'));

	expect(outputExists).toStrictEqual(true);
});

test('it writes a simple data object to file #2', async () => {
	const write = writer({
		outDir: outDir,
		renderer,
	});

	await write({
		url: 'path/to/file',
		output: {
			body: generatedFileContents,
		}
	});

	const outputExists = fs.existsSync(path.join(outDir, 'path/to/file.html'));

	expect(outputExists).toStrictEqual(true);
});

test('works with custom outFile()', async () => {
	const write = writer({
		outDir: outDir,
		outFile(x) {
			return x.name;
		},
		renderer,
	});

	await write({
		name: 'path/to/file.html',
		output: {
			body: generatedFileContents,
		},
	});

	const outputExists = fs.existsSync(path.join(outDir, 'path/to/file.html'));

	expect(outputExists).toStrictEqual(true);
});
